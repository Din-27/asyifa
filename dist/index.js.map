{"version":3,"sources":["../src/index.ts","../src/infrastructure/firestore.ts","../src/auth/handler.ts","../src/auth/middleware.ts","../src/auth/service.ts","../config/token.ts","../src/user/service.ts","../src/infrastructure/casbin/adapter.ts","../src/infrastructure/casbin/enforcer.ts","../src/auth/schema.ts","../src/patient/service.ts","../src/common/utils/nanoidNumberOnly.ts","../src/patient/handler.ts","../src/patient/schema.ts","../src/queue/service.ts","../src/queue/handler.ts","../src/queue/schema.ts"],"sourcesContent":["import \"dotenv/config\";\nimport \"reflect-metadata\";\nimport HyperExpress from \"hyper-express\";\nimport { Server } from \"socket.io\";\nimport { connectToFirestore } from \"@/infrastructure/firestore\";\nimport { AuthHandler } from \"@/auth\";\nimport { PatientHandler } from \"@/patient\";\nimport { QueueHandler } from \"@/queue\";\nimport { container } from \"tsyringe\";\n\nconst main = async () => {\n  try {\n    const firestore = connectToFirestore();\n\n    container.register(\"Firestore\", { useValue: firestore });\n    container.register(\"PoliciesCollection\", { useValue: firestore.collection(\"Policies\") });\n    container.register(\"UsersCollection\", { useValue: firestore.collection(\"Users\") });\n    container.register(\"PatientsCollection\", { useValue: firestore.collection(\"Patients\") });\n    container.register(\"QueuesCollection\", { useValue: firestore.collection(\"Queues\") });\n    container.register(\"QueueTypesCollection\", { useValue: firestore.collection(\"QueueTypes\") });\n\n    const authHandler = container.resolve(AuthHandler);\n    const patientHandler = container.resolve(PatientHandler);\n    const queueHandler = container.resolve(QueueHandler);\n\n    const app = new HyperExpress.Server();\n    const io = new Server();\n    const port = Number(process.env.PORT) || 3000;\n\n    io.attachApp(app.uws_instance);\n    io.on(\"connection\", (socket) => {\n      queueHandler.socket(io, socket);\n    });\n\n    app.use(\"/api\", authHandler.routes());\n    app.use(\"/api\", patientHandler.routes([authHandler.middleware.verifyAccessToken]));\n    app.use(\"/api\", queueHandler.routes([authHandler.middleware.verifyAccessToken]));\n\n    await app.listen(port);\n    console.log(\"Listening to port \" + port);\n  } catch (error) {\n    console.error(error);\n    console.error(\"Failed to start server\");\n    process.exit(1);\n  }\n};\n\nmain();\n","import { initializeApp, applicationDefault } from \"firebase-admin/app\";\nimport { getFirestore } from \"firebase-admin/firestore\";\n\nexport function connectToFirestore() {\n  const app = initializeApp({\n    credential: applicationDefault(),\n    projectId: process.env.GCP_PROJECT_ID,\n  });\n\n  return getFirestore(app)\n}","import HyperExpress from \"hyper-express\";\nimport { autoInjectable } from \"tsyringe\";\nimport { AuthMiddleware } from \"./middleware\";\nimport { signInRequestSchema, refreshTokenRequestSchema } from \"./schema\";\nimport { AuthService } from \"./service\";\nimport paseto from 'paseto'\n@autoInjectable()\nexport class AuthHandler {\n  constructor(private authService: AuthService, public middleware: AuthMiddleware) {}\n\n  routes = () => {\n    const r = new HyperExpress.Router();\n\n    r.post(\"/auth/signin\", this.signIn);\n    r.post(\"/auth/refresh-token\", this.refreshToken);\n\n    return r;\n  };\n\n  private signIn: HyperExpress.UserRouteHandler = async (req, res) => {\n    const requestBody = await req.json();\n\n    const { error } = signInRequestSchema.validate(requestBody);\n\n    if (error) {\n      res.status(400).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n      return;\n    }\n\n    try {\n      const credential = await this.authService.signIn(requestBody.username, requestBody.password);\n\n      res.json({\n        status: true,\n        data: credential,\n        error: null,\n      });\n    } catch (error: any) {\n      if (!error.httpStatusCode) console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n    }\n  };\n\n  private refreshToken: HyperExpress.UserRouteHandler = async (req, res) => {\n    const requestBody = await req.json();\n\n    const { error } = refreshTokenRequestSchema.validate(requestBody);\n\n    if (error) {\n      res.status(400).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n      return;\n    }\n\n    try {\n      const credential = await this.authService.refreshToken(requestBody.refreshToken);\n\n      res.json({\n        status: true,\n        data: credential,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      if (error instanceof paseto.errors.PasetoClaimInvalid) {\n        error[\"httpStatusCode\"] = 401;\n      }\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n    }\n  };\n}\n","import HyperExpress from \"hyper-express\";\nimport paseto from \"paseto\";\nimport { autoInjectable } from \"tsyringe\";\nimport { AuthService } from \"./service\";\n\n@autoInjectable()\nexport class AuthMiddleware {\n  constructor(private authService: AuthService) {}\n\n  verifyAccessToken: HyperExpress.MiddlewareHandler = async (req, res) => {\n    const token = req.headers.authorization?.replace(\"Bearer \", \"\");\n\n    if (!token) {\n      res.status(401).json({ message: \"No token provided!\" });\n      return;\n    }\n\n    try {\n      const tokenPayload = await this.authService.verifyAccessToken(token);\n\n      if (!tokenPayload) {\n        throw new Error(\"Invalid token\");\n      }\n\n      return;\n    } catch (error: any) {\n      if (!(error instanceof paseto.errors.PasetoError)) {\n        console.error({ error });\n      }\n\n      let message = error.message || \"Unauthorized!\";\n\n      res.status(401).json({ message });\n      return;\n    }\n  };\n}\n","import argon2 from \"@node-rs/argon2\";\nimport { cpus } from \"os\";\nimport paseto from \"paseto\";\nimport tokenConfig from \"@config/token\";\nimport { User, UserService } from \"@/user\";\nimport { autoInjectable, singleton } from \"tsyringe\";\nimport { CasbinEnforcer } from \"@/infrastructure/casbin\";\nimport { CredentialUser, TokenPayload } from \"./model\";\n\nconst CORES = cpus().length;\n\ntype GenerateTokenProps = {\n  user: User;\n  expiration: string;\n  secretKey: string;\n};\n\n@singleton()\n@autoInjectable()\nexport class AuthService {\n  constructor(private casbinEnforcer: CasbinEnforcer, private userService: UserService) {}\n\n  private generateToken = async ({ user, secretKey, expiration }: GenerateTokenProps) => {\n    const payload: TokenPayload = { id: user.id };\n    const token = await paseto.V4.sign(payload, secretKey, { expiresIn: expiration });\n\n    return token;\n  };\n\n  private generateAccessToken = async (user: User) => {\n    if (!tokenConfig.accessToken.secretKey) {\n      throw new Error(\"Private key for access token is not set\");\n    }\n\n    return this.generateToken({\n      user,\n      secretKey: tokenConfig.accessToken.secretKey,\n      expiration: tokenConfig.accessToken.expiration,\n    });\n  };\n\n  private generateRefreshToken = async (user: User) => {\n    if (!tokenConfig.refreshToken.secretKey) {\n      throw new Error(\"Private key for refresh token is not set\");\n    }\n\n    return this.generateToken({\n      user,\n      secretKey: tokenConfig.refreshToken.secretKey,\n      expiration: tokenConfig.refreshToken.expiration,\n    });\n  };\n\n  private verifyPassword = async (password: string, hash: string) => {\n    const isPasswordValid = await argon2.verify(hash, password, {\n      parallelism: CORES,\n    });\n\n    return isPasswordValid;\n  };\n\n  private verifyToken = async (token: string, publicKey: string): Promise<TokenPayload> => {\n    const { payload } = await paseto.V4.verify(token, publicKey, { complete: true });\n\n    return payload as TokenPayload;\n  };\n\n  public verifyAccessToken = async (token: string) => {\n    if (!tokenConfig.accessToken.publicKey) {\n      throw new Error(\"Public key for access token is not set\");\n    }\n\n    return this.verifyToken(token, tokenConfig.accessToken.publicKey);\n  };\n\n  public verifyRefreshToken = async (token: string) => {\n    if (!tokenConfig.refreshToken.publicKey) {\n      throw new Error(\"Public key for refresh token is not set\");\n    }\n\n    return this.verifyToken(token, tokenConfig.refreshToken.publicKey);\n  };\n\n  public refreshToken = async (refreshToken: string): Promise<CredentialUser> => {\n    const tokenPayload: TokenPayload = await this.verifyRefreshToken(refreshToken);\n\n    const user = await this.userService.getUserById(tokenPayload?.id);\n\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    const [accessToken, newRefreshToken, roles] = await Promise.all([\n      this.generateAccessToken(user),\n      this.generateRefreshToken(user),\n      this.getRolesByUser(user),\n    ]);\n\n    return {\n      id: user.id,\n      username: user.username,\n      accessToken,\n      refreshToken: newRefreshToken,\n      roles,\n    };\n  };\n\n  public getRolesByUser = async (user: User) => {\n    const enforcer = await this.casbinEnforcer.getEnforcer();\n    const roles = await enforcer.getRolesForUser(user.id);\n    return roles;\n  };\n\n  public signIn = async (username: string, password: string): Promise<CredentialUser> => {\n    const user = await this.userService.getUserByUsername(username);\n\n    if (!user) {\n      const e: any = new Error(\"Invalid username or password\");\n      e.httpStatusCode = 401;\n      throw e;\n    }\n\n    if (!user?.password) {\n      throw new Error(\"User password not found, please contact admin to reset your password\");\n    }\n\n    const isPasswordValid = await this.verifyPassword(password, user.password);\n\n    if (!isPasswordValid) {\n      const e: any = new Error(\"Invalid username or password\");\n      e.httpStatusCode = 401;\n      throw e;\n    }\n\n    const [accessToken, refreshToken, roles] = await Promise.all([\n      this.generateAccessToken(user),\n      this.generateRefreshToken(user),\n      this.getRolesByUser(user),\n    ]);\n\n    return {\n      id: user.id,\n      username,\n      accessToken,\n      refreshToken,\n      roles,\n    };\n  };\n}\n","export default {\n  accessToken: {\n    expiration: process.env.ACCESS_TOKEN_EXPIRATION || \"15 minutes\",\n    secretKey: process.env.ACCESS_TOKEN_SECRET_KEY,\n    publicKey: process.env.ACCESS_TOKEN_PUBLIC_KEY,\n  },\n  refreshToken: {\n    expiration: process.env.REFRESH_TOKEN_EXPIRATION || \"100 days\",\n    secretKey: process.env.REFRESH_TOKEN_SECRET_KEY,\n    publicKey: process.env.REFRESH_TOKEN_PUBLIC_KEY,\n  },\n};\n","import { Nullable } from \"@/common/utils/Nullable\";\nimport { CollectionReference } from \"firebase-admin/firestore\";\nimport { autoInjectable, inject, singleton } from \"tsyringe\";\nimport { User } from \"./model\";\n\n@singleton()\n@autoInjectable()\nexport class UserService {\n  constructor(@inject(\"UsersCollection\") private collection: CollectionReference) {}\n\n  getUserByUsername = async (username: Nullable<string>) => {\n    if (!username) return null;\n\n    const userRes = await this.collection.where(\"username\", \"==\", username).limit(1).get();\n    if (userRes.empty) return null;\n\n    const userDoc = userRes.docs[0];\n\n    const user = userDoc?.data() as Nullable<User>;\n\n    if (user && userDoc?.id) {\n      user.id = userDoc.id;\n    }\n\n    return user;\n  };\n\n  getUserById = async (id: Nullable<string>) => {\n    if (!id) return null;\n\n    const userDoc = await this.collection.doc(id).get();\n\n    const user = userDoc.data() as Nullable<User>;\n\n    if (user && userDoc.id) {\n      user.id = userDoc.id;\n    }\n\n    return user;\n  };\n}\n","import _ from \"lodash\";\nimport { Adapter, Assertion, BatchAdapter, Helper, Model } from \"casbin\";\nimport { CollectionReference, Firestore, WriteBatch } from \"firebase-admin/firestore\";\nimport { autoInjectable, inject } from \"tsyringe\";\n\ntype Policy = {\n  [key: string]: string | undefined;\n\n  ptype: string;\n  v0?: string;\n  v1?: string;\n  v2?: string;\n  v3?: string;\n  v4?: string;\n  v5?: string;\n};\n\n@autoInjectable()\nexport class CasbinAdapter implements Adapter, BatchAdapter {\n  private maxWritesPerBatch = 500;\n\n  constructor(\n    @inject(\"Firestore\") private firestore: Firestore,\n    @inject(\"PoliciesCollection\") private policiesCollection: CollectionReference,\n  ) {}\n\n  loadPolicy = async (model: Model) => {\n    const policiesRes = await this.policiesCollection.get();\n\n    if (policiesRes.empty) return;\n\n    _.each(policiesRes.docs, (policyDoc) => {\n      const policy = policyDoc.data() as Policy;\n\n      policy.id = policyDoc.id;\n\n      loadPolicyLine(policy, model);\n    });\n  };\n\n  savePolicy = async (model: Model) => {\n    try {\n      const batch = this.firestore.batch();\n\n      const policiesRes = await this.policiesCollection.get();\n\n      _.each(policiesRes.docs, (policyDoc) => {\n        batch.delete(policyDoc.ref);\n      });\n\n      const pPolicies = createPoliciesFromAstMap(model.model.get(\"p\"));\n      const gPolicies = createPoliciesFromAstMap(model.model.get(\"g\"));\n      const combinedPolicies = [...pPolicies, ...gPolicies];\n\n      if (combinedPolicies.length > 0) {\n        _.each(combinedPolicies, (policy) => {\n          const policyDocRef = this.policiesCollection.doc();\n          batch.set(policyDocRef, policy);\n        });\n      }\n      await batch.commit();\n\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  };\n\n  addPolicy = async (_sec: string, ptype: string, rule: string[]) => {\n    const policy = createPolicy(ptype, rule);\n    await this.policiesCollection.add(policy);\n  };\n\n  addPolicies = async (_sec: string, ptype: string, rules: string[][]) => {\n    const policies = rules.map((rule) => createPolicy(ptype, rule));\n\n    const insertChunks = _.chunk(policies, this.maxWritesPerBatch);\n    const insertPromises = _.map(insertChunks, (chunk) => {\n      const batch = this.firestore.batch();\n\n      _.each(chunk, (policy) => {\n        const policyDocRef = this.policiesCollection.doc();\n        batch.set(policyDocRef, policy);\n      });\n\n      return batch.commit();\n    });\n\n    await Promise.all(insertPromises);\n  };\n\n  /** you must commit the batch by **yourself** after calling this method */\n  private batchRemovePolicies = async (batch: WriteBatch, policies: Policy[]) => {\n    const deletePromises = _.map(policies, async (policy) => {\n      const policiesRes = await this.policiesCollection\n        .where(\"ptype\", \"==\", policy.ptype)\n        .where(\"v0\", \"==\", policy.v0)\n        .where(\"v1\", \"==\", policy.v1)\n        .where(\"v2\", \"==\", policy.v2)\n        .where(\"v3\", \"==\", policy.v3)\n        .where(\"v4\", \"==\", policy.v4)\n        .where(\"v5\", \"==\", policy.v5)\n        .limit(1)\n        .get();\n\n      if (policiesRes.empty) return;\n\n      _.each(policiesRes.docs, (policyDoc) => {\n        batch.delete(policyDoc.ref);\n      });\n    });\n\n    await Promise.all(deletePromises);\n  };\n\n  removePolicy = async (sec: string, ptype: string, rule: string[]) => {\n    await this.removePolicies(sec, ptype, [rule]);\n  };\n\n  removePolicies = async (_sec: string, ptype: string, rules: string[][]) => {\n    const deleteChunks = _.chunk(rules, this.maxWritesPerBatch);\n    const deletePromises = _.map(deleteChunks, async (chunk) => {\n      const batch = this.firestore.batch();\n      const policies = chunk.map((rule) => createPolicy(ptype, rule));\n      await this.batchRemovePolicies(batch, policies);\n      await batch.commit();\n    });\n\n    await Promise.all(deletePromises);\n  };\n\n  removeFilteredPolicy = async (\n    _sec: string,\n    ptype: string,\n    fieldIndex: number,\n    ...fieldValues: string[]\n  ) => {\n    const filteredPolicy = createFilteredPolicy(ptype, fieldIndex, ...fieldValues);\n    const batch = this.firestore.batch();\n    await this.batchRemovePolicies(batch, [filteredPolicy]);\n    await batch.commit();\n  };\n}\n\nfunction loadPolicyLine(policy: Policy, model: Model) {\n  const ps = [policy.v0, policy.v1, policy.v2, policy.v3, policy.v4, policy.v5];\n  const policyLine = policy.ptype + \", \" + _.compact(ps).join(\", \");\n\n  Helper.loadPolicyLine(policyLine, model);\n}\n\nfunction createPolicy(ptype: string, rule: readonly string[]) {\n  if (rule.length === 3) {\n    return {\n      ptype,\n      v0: rule[0],\n      v1: rule[1],\n      v2: rule[2],\n    };\n  }\n\n  return _.reduce(\n    rule,\n    (acc: Policy, _value, index) => {\n      acc[`v${index}`] = rule[index];\n      return acc;\n    },\n    { ptype },\n  );\n}\n\nfunction createPoliciesFromAstMap(astMap: Map<string, Assertion> | undefined) {\n  const policies: Policy[] = [];\n\n  if (!astMap) return policies;\n\n  astMap.forEach((ast, ptype) => {\n    _.each(ast.policy, (rule) => {\n      policies.push(createPolicy(ptype, rule));\n    });\n  });\n\n  return policies;\n}\n\nfunction createFilteredPolicy(ptype: string, fieldIndex: number, ...fieldValues: string[]): Policy {\n  const filteredPolicy: Policy = { ptype };\n\n  if (fieldIndex <= 0 && 0 < fieldIndex + fieldValues.length) {\n    filteredPolicy.v0 = fieldValues[0 - fieldIndex];\n  }\n  if (fieldIndex <= 1 && 1 < fieldIndex + fieldValues.length) {\n    filteredPolicy.v1 = fieldValues[1 - fieldIndex];\n  }\n  if (fieldIndex <= 2 && 2 < fieldIndex + fieldValues.length) {\n    filteredPolicy.v2 = fieldValues[2 - fieldIndex];\n  }\n  if (fieldIndex <= 3 && 3 < fieldIndex + fieldValues.length) {\n    filteredPolicy.v3 = fieldValues[3 - fieldIndex];\n  }\n  if (fieldIndex <= 4 && 4 < fieldIndex + fieldValues.length) {\n    filteredPolicy.v4 = fieldValues[4 - fieldIndex];\n  }\n  if (fieldIndex <= 5 && 5 < fieldIndex + fieldValues.length) {\n    filteredPolicy.v5 = fieldValues[5 - fieldIndex];\n  }\n\n  return filteredPolicy;\n}\n","import { Nullable } from \"@/common/utils/Nullable\";\nimport { Enforcer, newEnforcer } from \"casbin\";\nimport { autoInjectable, singleton } from \"tsyringe\";\nimport { CasbinAdapter } from \"./adapter\";\n\n@singleton()\n@autoInjectable()\nexport class CasbinEnforcer {\n  private instance: Nullable<Enforcer>;\n\n  constructor(private adapter: CasbinAdapter) {\n    this.instance = null;\n  }\n\n  public async getEnforcer(): Promise<Enforcer> {\n    if (!this.instance) {\n      this.instance = await newEnforcer(\"config/casbin/model.conf\", this.adapter);\n      this.instance.loadPolicy();\n    }\n    return this.instance;\n  }\n}\n","import Joi from \"joi\";\n\nexport const signInRequestSchema = Joi.object({\n  username: Joi.string().required(),\n  password: Joi.string().required(),\n}).options({ allowUnknown: true });\n\nexport const refreshTokenRequestSchema = Joi.object({\n  refreshToken: Joi.string().required(),\n}).options({ allowUnknown: true });\n","import _ from \"lodash\";\nimport { CollectionReference, FieldValue } from \"firebase-admin/firestore\";\nimport { autoInjectable, inject, singleton } from \"tsyringe\";\nimport parsePhoneNumber from \"libphonenumber-js\";\nimport { Patient } from \"./model\";\nimport { nanoidNumberOnly } from \"@/common/utils/nanoidNumberOnly\";\nimport { Nullable } from \"@/common/utils/Nullable\";\n\n@singleton()\n@autoInjectable()\nexport class PatientService {\n  constructor(@inject(\"PatientsCollection\") private patientsCollection: CollectionReference) {}\n\n  private generatePatientNumber = async (): Promise<string> => {\n    let patientNumberToReturn = nanoidNumberOnly(24);\n\n    for (let i = 0; i < 5; i++) {\n      // generate patient number\n      const patientNumber = nanoidNumberOnly(8 + i);\n      const docs = await this.patientsCollection\n        .select(\"patientNumber\")\n        .where(\"patientNumber\", \"==\", patientNumber)\n        .get();\n\n      if (docs.empty) {\n        patientNumberToReturn = patientNumber;\n        break;\n      }\n    }\n\n    return \"P\" + patientNumberToReturn;\n  };\n\n  getPatient = async (id: string): Promise<Nullable<Patient>> => {\n    const doc = await this.patientsCollection.doc(id).get();\n\n    if (!doc.exists) return null;\n\n    const data = doc.data();\n    const patient = {\n      ...data,\n      id: doc.id,\n      dateOfBirth: data?.dateOfBirth?.toDate?.(),\n      lastActive: data?.lastActive?.toDate?.(),\n      createdAt: data?.createdAt?.toDate?.(),\n      updatedAt: data?.updatedAt?.toDate?.(),\n    };\n\n    return patient as Patient;\n  };\n\n  getPatients = async (): Promise<Patient[]> => {\n    const result = await this.patientsCollection\n      .select(\"name\", \"dateOfBirth\", \"address\")\n      .orderBy(\"name\", \"asc\")\n      .get();\n\n    const patients = _.map(result.docs, (doc) => {\n      const docData = doc.data();\n      const patient = {\n        ...docData,\n        id: doc.id,\n        dateOfBirth: docData?.dateOfBirth?.toDate?.(),\n      };\n\n      return patient as Patient;\n    });\n\n    return patients;\n  };\n\n  addPatient = async (patient: Patient) => {\n    // format phone number\n    const parsedPhoneNumber = parsePhoneNumber(patient.phone, \"ID\");\n    if (parsedPhoneNumber?.isValid?.()) {\n      patient.phone = parsedPhoneNumber.number;\n    }\n\n    const payload: any = {\n      ...patient,\n      patientNumber: await this.generatePatientNumber(),\n      lastActive: FieldValue.serverTimestamp(),\n      createdAt: FieldValue.serverTimestamp(),\n      updatedAt: FieldValue.serverTimestamp(),\n    };\n\n    delete payload.id;\n\n    const docRef = await this.patientsCollection.add(payload);\n\n    return docRef.id;\n  };\n\n  updatePatient = async (patient: Patient): Promise<Patient> => {\n    const parsedPhoneNumber = parsePhoneNumber(patient.phone, \"ID\");\n    if (parsedPhoneNumber?.isValid?.()) {\n      patient.phone = parsedPhoneNumber.number;\n    }\n\n    const payload: any = {\n      ...patient,\n      updatedAt: FieldValue.serverTimestamp(),\n    };\n\n    delete payload.id;\n\n    const doc = await this.patientsCollection.doc(patient.id).update(payload);\n\n    patient.updatedAt = doc.writeTime.toDate();\n\n    return patient;\n  };\n\n  removePatient = async (id: string): Promise<void> => {\n    await this.patientsCollection.doc(id).delete();\n  };\n}\n","import { customAlphabet } from \"nanoid\";\n\nexport const nanoidNumberOnly = customAlphabet(\"1234567890\", 10);\n","import { Nullable } from \"@/common/utils/Nullable\";\nimport HyperExpress from \"hyper-express\";\nimport { autoInjectable } from \"tsyringe\";\nimport { Optional } from \"utility-types\";\nimport { Patient } from \"./model\";\nimport { addPatientRequestSchema, updatePatientRequestSchema } from \"./schema\";\nimport { PatientService } from \"./service\";\n\n@autoInjectable()\nexport class PatientHandler {\n  constructor(private patientService: PatientService) {}\n\n  routes = (middlewares: HyperExpress.MiddlewareHandler[] = []) => {\n    const r = new HyperExpress.Router();\n\n    r.use(\"/patients\", ...middlewares);\n    r.get(\"/patients\", this.getPatients);\n    r.get(\"/patients/:id\", this.getPatient);\n    r.post(\"/patients\", this.addPatient);\n    r.patch(\"/patients/:id\", this.updatePatient);\n    r.delete(\"/patients/:id\", this.removePatient);\n\n    return r;\n  };\n\n  private addPatient: HyperExpress.UserRouteHandler = async (req, res) => {\n    const requestBody = await req.json();\n\n    const { error } = addPatientRequestSchema.validate(requestBody);\n\n    if (error) {\n      res.status(400).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n      return;\n    }\n\n    const patient: Patient = {\n      id: \"\",\n      patientNumber: \"\",\n      name: requestBody.name,\n      gender: requestBody.gender,\n      dateOfBirth: new Date(requestBody.dateOfBirth),\n      address: requestBody.address,\n      phone: requestBody.phone || \"\",\n      bodyHeight: requestBody.bodyHeight,\n      bodyWeight: requestBody.bodyWeight,\n      lastActive: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    try {\n      const result = await this.patientService.addPatient(patient);\n      res.status(201).json({\n        status: true,\n        data: result,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n    }\n  };\n\n  private getPatients: HyperExpress.UserRouteHandler = async (_req, res) => {\n    try {\n      const patients = await this.patientService.getPatients();\n\n      res.json({\n        status: true,\n        data: patients,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: [],\n        error: error.message,\n      });\n    }\n  };\n\n  private getPatient: HyperExpress.UserRouteHandler = async (req, res) => {\n    try {\n      const patient: Nullable<Optional<Patient, \"createdAt\" | \"updatedAt\">> =\n        await this.patientService.getPatient(req.path_parameters.id!);\n\n      if (!patient) {\n        res.status(404).json({\n          status: false,\n          data: null,\n          error: \"Patient not found\",\n        });\n        return;\n      }\n\n      delete patient?.updatedAt;\n      delete patient?.createdAt;\n\n      res.json({\n        status: true,\n        data: patient,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n    }\n  };\n\n  private updatePatient: HyperExpress.UserRouteHandler = async (req, res) => {\n    const requestBody = await req.json();\n\n    const { error } = updatePatientRequestSchema.validate(requestBody);\n\n    if (error) {\n      res.status(400).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n      return;\n    }\n\n    try {\n      const patient = await this.patientService.getPatient(req.path_parameters.id!);\n\n      if (!patient) {\n        res.status(404).json({\n          status: false,\n          data: null,\n          error: \"Patient not found\",\n        });\n        return;\n      }\n\n      patient.name = requestBody.name || patient.name;\n      patient.gender = requestBody.gender || patient.gender;\n      patient.dateOfBirth = new Date(requestBody.dateOfBirth || patient.dateOfBirth);\n      patient.address = requestBody.address || patient.address;\n      patient.phone = requestBody.phone ?? patient.phone;\n      patient.bodyHeight = requestBody.bodyHeight || patient.bodyHeight;\n      patient.bodyWeight = requestBody.bodyWeight || patient.bodyWeight;\n      patient.updatedAt = new Date();\n\n      const result = await this.patientService.updatePatient(patient);\n\n      res.json({\n        status: true,\n        data: result,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n    }\n  };\n\n  private removePatient: HyperExpress.UserRouteHandler = async (req, res) => {\n    try {\n      const patient = await this.patientService.getPatient(req.path_parameters.id!);\n\n      if (!patient) {\n        res.status(404).json({\n          status: false,\n          data: null,\n          error: \"Patient not found\",\n        });\n        return;\n      }\n\n      await this.patientService.removePatient(patient.id);\n\n      res.json({\n        status: true,\n        data: \"Patient removed successfully\",\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n    }\n  };\n}\n","import Joi from \"joi\";\n\nexport const addPatientRequestSchema = Joi.object({\n  name: Joi.string().min(2).required(),\n  gender: Joi.number().valid(1, 2).required(),\n  dateOfBirth: Joi.date().iso().required(),\n  address: Joi.string().min(4).required(),\n  phone: Joi.string().allow(null, \"\"),\n  bodyHeight: Joi.number().required(),\n  bodyWeight: Joi.number().required(),\n}).options({ allowUnknown: true });\n\nexport const updatePatientRequestSchema = Joi.object({\n  name: Joi.string().min(2),\n  gender: Joi.number().valid(1, 2),\n  dateOfBirth: Joi.date().iso(),\n  address: Joi.string().min(4),\n  phone: Joi.string().allow(null, \"\"),\n  bodyHeight: Joi.number(),\n  bodyWeight: Joi.number(),\n}).options({ allowUnknown: true });\n","import _ from \"lodash\";\nimport { CollectionReference, FieldValue } from \"firebase-admin/firestore\";\nimport { autoInjectable, inject, singleton } from \"tsyringe\";\nimport { Queue, QueueType } from \"./model\";\nimport { Nullable } from \"@/common/utils/Nullable\";\n\n@singleton()\n@autoInjectable()\nexport class QueueService {\n  constructor(\n    @inject(\"QueuesCollection\") private queueCollection: CollectionReference,\n    @inject(\"QueueTypesCollection\") private queueTypeCollection: CollectionReference,\n  ) {}\n\n  addQueue = async (queue: Queue) => {\n    const payload: any = {\n      ...queue,\n      createdAt: FieldValue.serverTimestamp(),\n      updatedAt: FieldValue.serverTimestamp(),\n    };\n\n    delete payload.id;\n\n    const docRef = await this.queueCollection.add(payload);\n\n    return docRef.id;\n  };\n\n  getQueues = async (): Promise<Queue[]> => {\n    const result = await this.queueCollection.orderBy(\"updatedAt\", \"desc\").get();\n\n    const queuesPromises = _.map(result.docs, async (doc) => {\n      const data = doc.data();\n\n      const queue: any = {\n        ...data,\n        id: doc.id,\n        patient: {\n          ...data?.patient,\n          dateOfBirth: data?.patient?.dateOfBirth?.toDate?.(),\n        },\n        createdAt: data?.createdAt?.toDate?.(),\n        updatedAt: data?.updatedAt?.toDate?.(),\n      };\n\n      return queue as Queue;\n    });\n\n    const queues = await Promise.all(queuesPromises);\n\n    return queues;\n  };\n\n  getQueueType = async (id: string): Promise<Nullable<QueueType>> => {\n    const doc = await this.queueTypeCollection.doc(id).get();\n\n    if (!doc.exists) return null;\n\n    const data = doc.data();\n\n    const queueType: any = {\n      ...data,\n      id: doc.id,\n    };\n\n    return queueType as QueueType;\n  };\n\n  getQueueTypes = async (): Promise<QueueType[]> => {\n    const result = await this.queueTypeCollection.get();\n\n    const queueTypes = _.map(result.docs, (doc) => {\n      const data = doc.data();\n\n      const queueType: any = {\n        ...data,\n        id: doc.id,\n      };\n\n      return queueType as QueueType;\n    });\n\n    return queueTypes;\n  };\n}\n","import HyperExpress from \"hyper-express\";\nimport { Server, Socket } from \"socket.io\";\nimport { autoInjectable } from \"tsyringe\";\nimport { Queue } from \"./model\";\nimport { addQueueSchema } from \"./schema\";\nimport { PatientService } from \"@/patient\";\nimport { QueueService } from \"./service\";\n\n@autoInjectable()\nexport class QueueHandler {\n  constructor(private queueService: QueueService, private patientService: PatientService) {}\n\n  socket = (_io: Server, _socket: Socket) => {};\n\n  routes = (middlewares: HyperExpress.MiddlewareHandler[] = []) => {\n    const r = new HyperExpress.Router();\n\n    r.use(\"/queues\", ...middlewares);\n    r.get(\"/queues\", this.getQueues);\n    r.post(\"/queues\", this.addQueue);\n    r.get(\"/queue-types\", this.getQueueTypes);\n    r.post(\"/patients/:patientId/queues\", this.addQueue);\n\n    return r;\n  };\n\n  private addQueue: HyperExpress.UserRouteHandler = async (req, res) => {\n    const requestBody = await req.json();\n\n    if (req.path_parameters?.patientId) {\n      requestBody.patientId = req.path_parameters.patientId;\n    }\n\n    const { error } = addQueueSchema.validate(requestBody);\n\n    if (error) {\n      res.status(400).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n      return;\n    }\n\n    try {\n      const [patient, queueType] = await Promise.all([\n        this.patientService.getPatient(requestBody.patientId),\n        this.queueService.getQueueType(requestBody.typeId),\n      ]);\n\n      if (!patient) {\n        res.status(400).json({\n          status: false,\n          data: null,\n          error: \"Patient not found\",\n        });\n\n        return;\n      }\n\n      if (!queueType) {\n        res.status(400).json({\n          status: false,\n          data: null,\n          error: \"Queue type not found\",\n        });\n\n        return;\n      }\n\n      const queue: Queue = {\n        id: \"\",\n        bodyTemperature: requestBody.bodyTemperature,\n        bloodPressure: {\n          systolic: requestBody.bloodPressure.systolic,\n          diastolic: requestBody.bloodPressure.diastolic,\n        },\n        type: {\n          id: queueType.id,\n          name: queueType.name,\n        },\n        patient: {\n          id: patient.id,\n          name: patient.name,\n          dateOfBirth: patient.dateOfBirth,\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const result = await this.queueService.addQueue(queue);\n      res.status(201).json({\n        status: true,\n        data: result,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: null,\n        error: error.message,\n      });\n    }\n  };\n\n  private getQueues: HyperExpress.UserRouteHandler = async (_req, res) => {\n    try {\n      const queues = await this.queueService.getQueues();\n\n      res.json({\n        status: true,\n        data: queues,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: [],\n        error: error.message,\n      });\n    }\n  };\n\n  private getQueueTypes: HyperExpress.UserRouteHandler = async (_req, res) => {\n    try {\n      const queueTypes = await this.queueService.getQueueTypes();\n\n      res.json({\n        status: true,\n        data: queueTypes,\n        error: null,\n      });\n    } catch (error: any) {\n      console.error(error);\n\n      res.status(error.httpStatusCode || 500).json({\n        status: false,\n        data: [],\n        error: error.message,\n      });\n    }\n  };\n}\n","import Joi from \"joi\";\n\nexport const addQueueSchema = Joi.object({\n  bodyTemperature: Joi.number().required(),\n  bloodPressure: Joi.object({\n    systolic: Joi.number().required(),\n    diastolic: Joi.number().required(),\n  }).required(),\n  typeId: Joi.string().required(),\n  patientId: Joi.string().required(),\n}).options({ allowUnknown: true });\n"],"mappings":"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","names":["HyperExpress","Server","initializeApp","applicationDefault","getFirestore","connectToFirestore","app","initializeApp","credential","applicationDefault","projectId","process","env","GCP_PROJECT_ID","getFirestore","HyperExpress","autoInjectable","paseto","autoInjectable","argon2","cpus","paseto","accessToken","expiration","process","env","ACCESS_TOKEN_EXPIRATION","secretKey","ACCESS_TOKEN_SECRET_KEY","publicKey","ACCESS_TOKEN_PUBLIC_KEY","refreshToken","REFRESH_TOKEN_EXPIRATION","REFRESH_TOKEN_SECRET_KEY","REFRESH_TOKEN_PUBLIC_KEY","CollectionReference","autoInjectable","inject","singleton","UserService","constructor","collection","getUserByUsername","username","userRes","where","limit","get","empty","userDoc","docs","user","data","id","getUserById","doc","singleton","autoInjectable","inject","autoInjectable","singleton","_","Helper","CollectionReference","Firestore","autoInjectable","inject","__decorate","CasbinAdapter","constructor","firestore","policiesCollection","maxWritesPerBatch","loadPolicy","model","policiesRes","get","empty","_","each","docs","policyDoc","policy","data","id","loadPolicyLine","savePolicy","batch","delete","ref","pPolicies","createPoliciesFromAstMap","gPolicies","combinedPolicies","length","policyDocRef","doc","set","commit","e","console","error","addPolicy","_sec","ptype","rule","createPolicy","add","addPolicies","rules","policies","map","insertChunks","chunk","insertPromises","Promise","all","batchRemovePolicies","deletePromises","where","v0","v1","v2","v3","v4","v5","limit","removePolicy","sec","removePolicies","deleteChunks","removeFilteredPolicy","fieldIndex","fieldValues","filteredPolicy","createFilteredPolicy","autoInjectable","inject","CollectionReference","ps","policyLine","compact","join","Helper","reduce","acc","_value","index","astMap","forEach","ast","push","newEnforcer","autoInjectable","singleton","__decorate","CasbinEnforcer","constructor","adapter","instance","getEnforcer","newEnforcer","loadPolicy","singleton","autoInjectable","__decorate","CORES","cpus","length","AuthService","constructor","casbinEnforcer","userService","generateToken","user","secretKey","expiration","payload","id","token","paseto","V4","sign","expiresIn","generateAccessToken","tokenConfig","accessToken","Error","generateRefreshToken","refreshToken","verifyPassword","password","hash","isPasswordValid","argon2","verify","parallelism","verifyToken","publicKey","complete","verifyAccessToken","verifyRefreshToken","tokenPayload","getUserById","newRefreshToken","roles","Promise","all","getRolesByUser","username","enforcer","getEnforcer","getRolesForUser","signIn","getUserByUsername","e","httpStatusCode","singleton","autoInjectable","__decorate","AuthMiddleware","constructor","authService","verifyAccessToken","req","res","token","headers","authorization","replace","status","json","message","tokenPayload","Error","error","paseto","errors","PasetoError","console","autoInjectable","Joi","signInRequestSchema","object","username","string","required","password","options","allowUnknown","refreshTokenRequestSchema","refreshToken","paseto","__decorate","AuthHandler","constructor","authService","middleware","routes","r","HyperExpress","Router","post","signIn","refreshToken","req","res","requestBody","json","error","signInRequestSchema","validate","status","data","message","credential","username","password","httpStatusCode","console","refreshTokenRequestSchema","paseto","errors","PasetoClaimInvalid","autoInjectable","_","CollectionReference","FieldValue","autoInjectable","inject","singleton","parsePhoneNumber","customAlphabet","nanoidNumberOnly","__decorate","PatientService","constructor","patientsCollection","generatePatientNumber","patientNumberToReturn","nanoidNumberOnly","i","patientNumber","docs","select","where","get","empty","getPatient","id","doc","exists","data","patient","dateOfBirth","toDate","lastActive","createdAt","updatedAt","getPatients","result","orderBy","patients","_","map","docData","addPatient","parsedPhoneNumber","parsePhoneNumber","phone","isValid","number","payload","FieldValue","serverTimestamp","docRef","add","updatePatient","update","writeTime","removePatient","delete","singleton","autoInjectable","inject","CollectionReference","HyperExpress","autoInjectable","Joi","addPatientRequestSchema","object","name","string","min","required","gender","number","valid","dateOfBirth","date","iso","address","phone","allow","bodyHeight","bodyWeight","options","allowUnknown","updatePatientRequestSchema","__decorate","PatientHandler","constructor","patientService","routes","middlewares","r","HyperExpress","Router","use","get","getPatients","getPatient","post","addPatient","patch","updatePatient","delete","removePatient","req","res","requestBody","json","error","addPatientRequestSchema","validate","status","data","message","patient","id","patientNumber","name","gender","dateOfBirth","Date","address","phone","bodyHeight","bodyWeight","lastActive","createdAt","updatedAt","result","console","httpStatusCode","_req","patients","path_parameters","updatePatientRequestSchema","autoInjectable","_","CollectionReference","FieldValue","autoInjectable","inject","singleton","__decorate","QueueService","constructor","queueCollection","queueTypeCollection","addQueue","queue","payload","createdAt","FieldValue","serverTimestamp","updatedAt","id","docRef","add","getQueues","result","orderBy","get","queuesPromises","_","map","docs","doc","data","patient","dateOfBirth","toDate","queues","Promise","all","getQueueType","exists","queueType","getQueueTypes","queueTypes","singleton","autoInjectable","inject","CollectionReference","HyperExpress","autoInjectable","Joi","addQueueSchema","object","bodyTemperature","number","required","bloodPressure","systolic","diastolic","typeId","string","patientId","options","allowUnknown","__decorate","QueueHandler","constructor","queueService","patientService","socket","_io","_socket","routes","middlewares","r","HyperExpress","Router","use","get","getQueues","post","addQueue","getQueueTypes","req","res","requestBody","json","path_parameters","patientId","error","addQueueSchema","validate","status","data","message","patient","queueType","Promise","all","getPatient","getQueueType","typeId","queue","id","bodyTemperature","bloodPressure","systolic","diastolic","type","name","dateOfBirth","createdAt","Date","updatedAt","result","console","httpStatusCode","_req","queues","queueTypes","autoInjectable","container","main","firestore","connectToFirestore","container","register","useValue","collection","authHandler","resolve","AuthHandler","patientHandler","PatientHandler","queueHandler","QueueHandler","app","HyperExpress","Server","io","port","Number","process","env","PORT","attachApp","uws_instance","on","socket","use","routes","middleware","verifyAccessToken","listen","console","log","error","exit"]}